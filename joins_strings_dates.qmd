---
title: "Joins, strings, and dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(janitor)
library(here)
library(palmerpenguins)
library(lubridate)
```

## Joins

```{r}
# Used "datapasta" from the "Addins" dropdown menu to copy and paste as a tribble

animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### Full Join

```{r}
full_join_ex <- full_join(animals, sites, by = "location")
```

### Left join

```{r}
left_join_ex <- left_join(animals, sites, by = "location")

# Right joins?
```

### Inner join

```{r}
inner_join_ex <- inner_join(animals, sites, by = "location")

sites2 <- sites |> rename(loc = location)
```

### non matching unique identifiers/column names

```{r}
nonmatch <- full_join(animals, sites2, by = c("location" = "loc"))
```

### Semi join

```{r}
semi_join_ex <- semi_join(animals, sites, by = "location")
```

### Anti join

```{r}
anti_join_ex <- anti_join(animals, sites, by = "location")
```

### Data wrangling Refreshers

```{r}
penguins_refresh <- penguins |> 
  filter(island %in% c("Bisco", "Dream")) |> 
  select(-year, -sex) |> 
  mutate(body_mass_kg = body_mass_g / 1000) |> 
  rename(location = island)
  
```

## Dates with Lubridate


```{r}
my_date<- "03-15-1998"

class(my_date)
# diff formats: mdy, ymd, dmy
# lubridate converts dates to diff formats!
lubridate::mdy(my_date)

my_date2 <- "11/7/2003"

lubridate::dmy(my_date2)

my_date3 <- "08-Jun-1974"

my_real_date <- lubridate::dmy(my_date3)
class(my_real_date)

```

Note: make sure to use the right function (ymd, mdy, dmy, etc.) where the argument is the same format as the function
I.E., for ymd, you need to input a date that is in year, month, day in any way, like: ymd(2020, August, 5) which will become: "2020-08-05" with a class "Date"


```{r}
time1 <- "08, 12, 2020, 11:18"

time1_correct <- lubridate::mdy_hm(time1)
time1_correct
class(time1_correct)
```

```{r}
# converting time zones
lubridate::with_tz(time1_correct, "America/Los_Angeles")

lubridate::with_tz(time1_correct, "America/New_York")

time2 <- lubridate::ymd_hms(time1_correct)
time2
#pull individual components of the saved date:
year(time2)
day(time2)
minute(time2)

```

```{r}
teddy_bday <- lubridate::ymd("20170615")

wday(teddy_bday, label = TRUE)

my_bday <- lubridate::ymd("20000531")

wday(my_bday, label = TRUE)

week(my_bday)
```

